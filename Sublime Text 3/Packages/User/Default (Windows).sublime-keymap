[
	// 对于快捷键的解析顺序，是从该文件的底部解析到顶部，最先匹配的快捷键即是该功能键。故带条件判断的快捷键一般要放在后面
	// 解析完该文件再解析默认的keymap文件
	// 注意：能不适用ctrl+alt+<alphanum>就不使用，win键是super
	{ "keys": ["ctrl+up"], "command": "select_lines", "args": {"forward": false} },
	{ "keys": ["ctrl+down"], "command": "select_lines", "args": {"forward": true} },
	{ "keys": ["alt+up"], "command": "swap_line_up" },
	{ "keys": ["alt+down"], "command": "swap_line_down" },
	{ "keys": ["ctrl+alt+up"], "command": "duplicate_line", "args": {"forward": false} },
	{ "keys": ["ctrl+alt+down"], "command": "duplicate_line", "args": {"forward": true} },
	{ "keys": ["ctrl+shift+up"], "command": "select_lines", "args": {"forward": false} },
	{ "keys": ["ctrl+shift+down"], "command": "select_lines", "args": {"forward": true} },
    { "keys": ["alt+shift+up"], "command": "scroll_lines", "args": {"amount": 1.0 } },
	{ "keys": ["alt+shift+down"], "command": "scroll_lines", "args": {"amount": -1.0 } },

    { "keys": ["ctrl+alt+shift+up"], "command": "scroll_to_bof" },
	{ "keys": ["ctrl+alt+shift+down"], "command": "scroll_lines", "args": {"amount": -1.0 } },

	{ "keys": ["alt+shift+t"], "command": "transpose" },

	{ "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

	{ "keys": ["alt+\/"], "command": "auto_complete" },
	{ "keys": ["alt+\/"], "command": "replace_completion_with_auto_complete", "context":
		[
			{ "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "setting.tab_completion", "operator": "equal", "operand": true }
		]
	},

	{ "keys": ["ctrl+shift+q"], "command": "save_macro" },
	{ "keys": ["ctrl+alt+q"], "command": "run_macro" },

	{ "keys": ["ctrl+alt+left"], "command": "move", "args": {"by": "subwords", "forward": false} },
	{ "keys": ["ctrl+alt+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} },

	{ "keys": ["alt+left"], "command": "jump_back" },
	{ "keys": ["alt+right"], "command": "jump_forward" },

	{ "keys": ["alt+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "#"} },
	{ "keys": ["ctrl+shift+r"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
	{ "keys": ["ctrl+alt+r"], "command": "goto_symbol_in_project" },

	// 原alt+r功能，修改为alt+x，正则匹配
	// 原搜索替换时切换用功能键，替换为alt+z,alt+x,alt+c,alt+a
	{ "keys": ["alt+z"], "command": "toggle_regex", "context":
		[
			{ "key": "setting.is_widget", "operator": "equal", "operand": true }
		]
	},
	{ "keys": ["alt+x"], "command": "toggle_case_sensitive", "context":
		[
			{ "key": "setting.is_widget", "operator": "equal", "operand": true }
		]
	},
	{ "keys": ["alt+c"], "command": "toggle_whole_word", "context":
		[
			{ "key": "setting.is_widget", "operator": "equal", "operand": true }
		]
	},

	// 下面五个是关于backspace的快捷键
	{ "keys": ["shift+backspace"], "command": "right_delete" },
	// 原快捷键
	{ "keys": ["ctrl+backspace"], "command": "delete_word", "args": { "forward": false } },
	// 原快捷键
	{ "keys": ["ctrl+shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard BOL.sublime-macro"} },
	// 新增快捷键，与ctrl+delete功能相同
	{ "keys": ["alt+backspace"], "command": "delete_word", "args": { "forward": true } },
	// 新增快捷键，与ctrl+shift+delete功能相同
	{ "keys": ["alt+shift+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard EOL.sublime-macro"} },
	// 与上面五个类似，下面是关于delete的快捷键，可以不用知道，毕竟delete没有backspace用着方便
	// 因shift+delete被剪切占用，故下面只有四个，shift+insert粘贴，ctrl+insert复制。
	// 原快捷键
	{ "keys": ["ctrl+delete"], "command": "delete_word", "args": { "forward": true } },
	// 原快捷键
	{ "keys": ["ctrl+shift+delete"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard EOL.sublime-macro"} },
	// 新增快捷键，与ctrl+backspace功能相同
	{ "keys": ["alt+delete"], "command": "delete_word", "args": { "forward": true } },
	// 新增快捷键，与ctrl+shift+backspace功能相同
	{ "keys": ["alt+shift+delete"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard BOL.sublime-macro"} },

	// 下面一个与enter键重复，修改为其他的
	// 屏蔽此功能，影响默认对context的判断
	// { "keys": ["shift+enter"], "command": "insert", "args": {"characters": "\n"} },

	{ "keys": ["alt+shift+v"], "command": "paste_from_history" },

	// 以下几个是原来关于F3的几个指令，因f3被指向定义占用，故用下面代替
	{ "keys": ["ctrl+,"], "command": "find_under" },
	{ "keys": ["ctrl+shift+,"], "command": "find_under_prev" },
	// 上面两个与下面两个的区别在于
	// 上面两个自动选中临近单词进行搜索
	// 下面两个是ctrl+f里面搜索内容的下一个与上一个
	{ "keys": ["alt+,"], "command": "find_next" },
	{ "keys": ["alt+shift+,"], "command": "find_prev" },
	{ "keys": ["alt+shift+r"], "command": "find_all_under" },

	// 指向定义，原f12功能，虽然大多数编辑器中f3都是查找下一个
	// 但是因为Eclipse使用过度，f3跳转定义估计很难改，就用f3吧
	// ctrl+o的习惯到现在还没改成ctrl+r
	{ "keys": ["f3"], "command": "goto_definition" },

	// 下面两个同ctrl+/和ctrl+shift+/
	{ "keys": ["ctrl+shift+c"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["alt+shift+c"], "command": "toggle_comment", "args": { "block": true } },

	{ "keys": ["alt+super+e"], "command": "open_dir", "args": {"dir": "$file_path", "file": "$file_name"}},

	// 模仿Intellij的快捷键
	{ "keys": ["ctrl+shift+j"], "command": "join_lines" },

	// 以下是插件快捷键，注意安装插件后再使用

	// Emmet默认展开快捷键，默认是ctrl+e，修改为ctrl+t
	{
        "keys": [
            "ctrl+t"
        ],
        "args": {
            "action": "expand_abbreviation"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.expand_abbreviation"
            }
        ]
    },
    // 原ctrl+e功能为slurp_find_string
    // 貌似是使用选中内容搜索，并没有什么卵用，替换成依次向下选择多个
    // 纠正上面的内容，其实原来是有作用的，他的作用是替换ctrl+f等系列搜索面板中搜索框的字符串
    // ctrl+shift+e是替换替换框的字符串，暂时先舍弃该功能。
    { "keys": ["ctrl+e"], "command": "find_under_expand" },

	{ "keys": ["ctrl+k", "ctrl+e"], "command": "find_under_expand_skip" },

	// 虽然感觉ctrl+t的功能和这里的alt+shift+e功能有关联
	// 但是并想改ctrl+t为ctrl+e，因为ctrl+t可能并不常用
	// 基本上tab就足够了，ctrl+t也可以理解为tab，就用ctrl+t吧
	{ "keys": ["alt+shift+e"], "command": "insert_snippet", "args": { "name": "Packages/XML/Snippets/long-tag.sublime-snippet" } },

	// q理解为query查询，替换搜索字符串
	{ "keys": ["alt+shift+q"], "command": "slurp_find_string" },

	// w理解为write，替换替换字符串值。
	{ "keys": ["alt+shift+w"], "command": "slurp_replace_string" },

	{ "keys": ["f12"], "command": "context_open" },

	// 选择相关，move to括号，使用ctrl+\替换，因ctrl+m并没有什么明显意义
	// 原ctrl+l选择行功能，向右移动一位使用ctrl+;代替，原ctrl+;的功能已被alt+r使用
	// 这样的好处是腾出了两个ctrl+字母的功能键
	{ "keys": ["ctrl+\\"], "command": "move_to", "args": {"to": "brackets"} },
	{ "keys": ["ctrl+;"], "command": "expand_selection", "args": {"to": "line"} },
	{ "keys": ["alt+a"], "command": "expand_selection", "args": {"to": "brackets"} },
	{ "keys": ["ctrl+shift+a"], "command": "expand_selection", "args": {"to": "scope"} },
	{ "keys": ["alt+shift+a"], "command": "expand_selection", "args": {"to": "indentation"} },
	{ "keys": ["ctrl+alt+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },

	// ctrl+shift+l的功能映射的ctrl+shift+;，与ctrl+l保持一致
	{ "keys": ["ctrl+shift+;"], "command": "split_selection_into_lines" },

	{ "keys": ["ctrl+m"], "command": "context_menu" },

	{ "keys": ["alt+shift+u"], "command": "upper_case" },
	{ "keys": ["alt+shift+l"], "command": "lower_case" },
	{ "keys": ["alt+shift+s"], "command": "swap_case" },
	{ "keys": ["alt+shift+x"], "command": "swap_name_style" },


	/* 以下为各种插件的配置 */

	// 一些sidebarEnhancements配置
	{ "keys": ["ctrl+alt+c"], "command": "copy_path" },

	// terminal插件配置
	// { "keys": ["ctrl+shift+x"], "command": "open_terminal" },
	{ "keys": ["ctrl+shift+x"], "command": "context_open_terminal" },
	{ "keys": ["ctrl+shift+alt+x"], "command": "open_terminal_from_project" },
	// 此快捷键被terminal覆盖，改回去，Terminal插件被我干掉了，这个也不要了
	// { "keys": ["ctrl+shift+t"], "command": "reopen_last_file" },
	// revert 还原所有未保存的修改，可以用于防止close命令的提示。

	// 自己写的插件，在sidebar展示并移动焦点到sidebar
	{ "keys": ["ctrl+0"], "command": "reveal_and_focus_side_bar" },

	// 自己写的插件，展示一个打开的文件列表，后期可以优化成带输入框的
	{ "keys": ["ctrl+shift+o"], "command": "open_file_list" },


	// alignment插件配置
	// ctrl+alt+a被截图占用，考虑ctrl+alt+a当截图快捷键的缺点(按alt键在某些情况下会丢失要截的区域)
	// 以后要换掉，换成ctrl+shift+`
    { "keys": ["ctrl+alt+a"], "command": "alignment" },


	// BracketHighlighter括号高亮
    // Toggle Global Enable
    {
        "keys": ["ctrl+shift+super+\\"],
        "command": "bh_toggle_enable"
    },
    // Search to end of file for bracket
    {
        "keys": ["ctrl+shift+super+q"],
        "command": "bh_key",
        "args":
        {
            "lines" : true
        }
    },
    // Go to left bracket
    {
        "keys": ["ctrl+shift+super+up"],
        "command": "bh_key",
        "args":
        {
            "no_outside_adj": null,
            "no_block_mode": null,
            "lines" : true,
            "plugin":
            {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect",
                "args": {"select": "left"}
            }
        }
    },
    // Go to right bracket
    {
        "keys": ["ctrl+shift+super+down"],
        "command": "bh_key",
        "args":
        {
            "no_outside_adj": null,
            "no_block_mode": null,
            "lines" : true,
            "plugin":
            {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect",
                "args": {"select": "right"}
            }
        }
    },
    // Remove brackets
    {
        "keys": ["ctrl+shift+super+e"],
        "command": "bh_remove_brackets"
    },
    // Toggle string escape mode for sub bracket search in strings
    {
        "keys": ["ctrl+shift+super+x"],
        "command": "bh_toggle_string_escape_mode"
    },
    // Select text between brackets
    {
        "no_outside_adj": null,
        "keys": ["ctrl+shift+super+s"],
        "command": "bh_key",
        "args":
        {
            "lines" : true,
            "plugin":
            {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect"
            }
        }
    },
    // Select text including brackets
    {
        "keys": ["ctrl+shift+super+a"],
        "command": "bh_key",
        "args":
        {
            "no_outside_adj": null,
            "lines" : true,
            "plugin":
            {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect",
                "args": {"always_include_brackets": true}
            }
        }
    },
    // Select tag name of HTML/XML tag (both opening name and closing)
    {
        "keys": ["ctrl+shift+super+r"],
        "command": "bh_key",
        "args":
        {
            "plugin":
            {
                "type": ["cfml", "html", "angle"],
                "command": "bh_modules.tagnameselect"
            }
        }
    },
    // Select the attribute to the right of the cursor (will wrap inside the tag)
    {
        "keys": ["ctrl+shift+super+right"],
        "command": "bh_key",
        "args":
        {
            "plugin":
            {
                "type": ["cfml", "html", "angle"],
                "command": "bh_modules.tagattrselect",
                "args": {"direction": "right"}
            }
        }
    },
    // Select the attribute to the left of the cursor (will wrap inside the tag)
    {
        "keys": ["ctrl+shift+super+left"],
        "command": "bh_key",
        "args":
        {
            "plugin":
            {
                "type": ["cfml", "html", "angle"],
                "command": "bh_modules.tagattrselect",
                "args": {"direction": "left"}
            }
        }
    },
    // Convert single quote string to double quoted string and vice versa
    // Will handle escaping or unescaping quotes within the string
    {
        "keys": ["ctrl+shift+super+'"],
        "command": "bh_key",
        "args":
        {
            "lines" : true,
            "plugin":
            {
                "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"],
                "command": "bh_modules.swapquotes"
            }
        }
    },
    // Fold contents between brackets
    {
        "keys": ["ctrl+shift+super+/"],
        "command": "bh_key",
        "args":
        {
            "plugin": {
                "type": ["__all__"],
                "command" : "bh_modules.foldbracket"
            }
		}
    },
    // Swap brackets with another type
    {
        "keys": ["ctrl+shift+super+e"],
        "command": "swap_brackets"
    },
    // Surround selection with brackets from quick panel
    {
        "keys": ["ctrl+shift+super+w"],
        "command": "wrap_brackets"
    },
    // Toggle high visibility mode
    {
        "keys": ["ctrl+shift+super+v"],
        "command": "bh_toggle_high_visibility"
    },


    // Color highlighter插件配置
    {
        "keys": ["alt+super+c"],
        "command": "color_picker",
        "context": [
            {
                "key": "color_highlighter.color_picker"
            }
        ]
    },
    {
        "keys": ["alt+super+x"],
        "command": "color_convert",
        "context": [
            {
                "key": "color_highlighter.color_convert"
            }
        ]
    },
    {
        "keys": ["alt+super+,"],
        "command": "color_convert_prev",
        "context": [
            {
                "key": "color_highlighter.color_convert_prev"
            }
        ]
    },
    {
        "keys": ["alt+super+."],
        "command": "color_convert_next",
        "context": [
            {
                "key": "color_highlighter.color_convert_next"
            }
        ]
    },
    {
        "keys": ["alt+super+z"],
        "command": "go_to_var_definition",
        "context": [
            {
                "key": "color_highlighter.go_to_var_definition"
            }
        ]
    },


    // gitgutter配置
    { "keys": ["ctrl+shift+alt+c", "up"], "command": "git_gutter_prev_change" },
    { "keys": ["ctrl+shift+alt+c", "down"], "command": "git_gutter_next_change" },
    { "keys": ["ctrl+shift+alt+c", "d"], "command": "git_gutter_diff_popup" },
    { "keys": ["ctrl+shift+alt+c", "v"], "command": "git_gutter_show_compare" },
    { "keys": ["ctrl+shift+alt+c", "h"], "command": "git_gutter_compare_head" },
    { "keys": ["ctrl+shift+alt+c", "o"], "command": "git_gutter_compare_origin" },
    { "keys": ["ctrl+shift+alt+c", "c"], "command": "git_gutter_compare_commit" },
    { "keys": ["ctrl+shift+alt+c", "b"], "command": "git_gutter_compare_branch" },
    { "keys": ["ctrl+shift+alt+c", "t"], "command": "git_gutter_compare_tag" },


    // sublimelinter配置
    { "keys": ["ctrl+super+l"], "command": "sublimelinter_lint" },
    { "keys": ["ctrl+super+down"], "command": "sublimelinter_goto_error", "args": {"direction": "next"} },
    { "keys": ["ctrl+super+up"], "command": "sublimelinter_goto_error", "args": {"direction": "previous"} },
    { "keys": ["ctrl+super+a"], "command": "sublimelinter_show_all_errors" },
    { "keys": ["ctrl+super+t"], "command": "sublimelinter_toggle_linter", "args": {"which": "all"}},


    // sublimeCodeIntel配置
    { "keys": ["alt+super+/"], "command": "code_intel_auto_complete" },
    { "keys": ["alt+super+up"], "command": "goto_python_definition"},
    { "keys": ["alt+super+left"], "command": "back_to_python_definition"},

    // anaconda插件配置
    {
        "command": "anaconda_find_usages", "keys": ["alt+super+a"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_goto", "keys": ["alt+super+s"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_doc", "keys": ["alt+super+d"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_auto_format", "keys": ["alt+super+f"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },


    // emmet配置
    {
        "keys": [
            "ctrl+super+;"
        ],
        "args": {
            "action": "remove_tag"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.remove_tag"
            }
        ]
    },
    // slash斜杠，/斜杠 slash forward_slash，\反斜杠 back_slash
    {
        "keys": [
            "ctrl+super+forward_slash"
        ],
        "args": {
            "action": "toggle_comment"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "operand": "source.css, source.less, source.scss, source.postcss, text.xml, text.html - source",
                "operator": "equal",
                "match_all": true,
                "key": "selector"
            },
            {
                "match_all": true,
                "key": "emmet_action_enabled.toggle_comment"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+enter"
        ],
        "command": "expand_as_you_type",
        "context": [
            {
                "operand": false,
                "operator": "equal",
                "match_all": true,
                "key": "setting.is_widget"
            },
            {
                "match_all": true,
                "key": "emmet_action_enabled.expand_as_you_type"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+y"
        ],
        "args": {
            "action": "evaluate_math_expression"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.evaluate_math_expression"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+0"
        ],
        "args": {
            "action": "balance_inward"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.balance_inward"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+r"
        ],
        "args": {
            "action": "reflect_css_value"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.reflect_css_value"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+."
        ],
        "args": {
            "action": "select_next_item"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.select_next_item"
            }
        ]
    },
    {
        "keys": [
            "alt+super+,"
        ],
        "args": {
            "action": "balance_outward"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.balance_outward"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+,"
        ],
        "args": {
            "action": "select_previous_item"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.select_previous_item"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+`"
        ],
        "args": {
            "action": "split_join_tag"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.split_join_tag"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+g"
        ],
        "command": "wrap_as_you_type",
        "context": [
            {
                "operand": false,
                "operator": "equal",
                "match_all": true,
                "key": "setting.is_widget"
            },
            {
                "match_all": true,
                "key": "emmet_action_enabled.wrap_as_you_type"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+'"
        ],
        "command": "rename_tag",
        "context": [
            {
                "key": "emmet_action_enabled.rename_tag"
            }
        ]
    },
    {
        "keys": [
            "alt+super+'"
        ],
        "args": {
            "action": "encode_decode_data_url"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.encode_decode_data_url"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+u"
        ],
        "command": "update_as_you_type",
        "context": [
            {
                "operand": false,
                "operator": "equal",
                "match_all": true,
                "key": "setting.is_widget"
            },
            {
                "match_all": true,
                "key": "emmet_action_enabled.update_as_you_type"
            }
        ]
    },
    {
        "keys": [
            "ctrl+alt+super+u"
        ],
        "args": {
            "action": "update_image_size"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.update_image_size"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+j"
        ],
        "args": {
            "action": "matching_pair"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.matching_pair"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+left"
        ],
        "args": {
            "action": "prev_edit_point"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.prev_edit_point"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+right"
        ],
        "args": {
            "action": "next_edit_point"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.next_edit_point"
            }
        ]
    },
    {
        "keys": [
            "alt+super+="
        ],
        "args": {
            "action": "increment_number_by_01"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.increment_number_by_01"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+="
        ],
        "args": {
            "action": "increment_number_by_1"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.increment_number_by_1"
            }
        ]
    },
    {
        "keys": [
            "ctrl+alt+super+="
        ],
        "args": {
            "action": "increment_number_by_10"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.increment_number_by_10"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+-"
        ],
        "args": {
            "action": "decrement_number_by_1"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.decrement_number_by_1"
            }
        ]
    },
    {
        "keys": [
            "alt+super+-"
        ],
        "args": {
            "action": "decrement_number_by_01"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.decrement_number_by_01"
            }
        ]
    },
    {
        "keys": [
            "ctrl+alt+super+-"
        ],
        "args": {
            "action": "decrement_number_by_10"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.decrement_number_by_10"
            }
        ]
    },
    {
        "keys": [
            "ctrl+super+e"
        ],
        "args": {
            "action": "expand_abbreviation"
        },
        "command": "run_emmet_action",
        "context": [
            {
                "key": "emmet_action_enabled.expand_abbreviation"
            }
        ]
    },

]
